name: Build and test
on:
  push:
    # Empty configuration means use default (ie. test all branches)
    branches-ignore:
      - staging.tmp
      - trying.tmp
      - staging-squash-merge.tmp

  pull_request:
    # Only take PRs to devel
    branches:
      - devel

    # Type of events to run CI on
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

# Run every script actions in bash
defaults:
  run:
    shell: bash

jobs:
  pre_run:
    name: Provide additional context for the workflow
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.skip_result.outputs.result }}

    steps:
      - id: run_cond
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          # Cancel CI on outdated commits
          cancel_others: true
          # Don't skip when a duplicated run (ie. from a PR) is done.
          #
          # Only CI in upstream has docs publishing rights.
          skip_after_successful_duplicate: false
          # Do not skip on push, dispatched or cron
          do_not_skip: '["push", "workflow_dispatch", "schedule"]'

      - id: skip_result
        name: Whether to skip checks
        run: |
          if [[ '${{ steps.run_cond.outputs.should_skip }}' == true ]]; then
            echo "::set-output name=result::true"
          elif [[ '${{ github.event.pull_request.draft }}' == true ]]; then
            echo "Pull request is in draft state, skipping"
            echo "::set-output name=result::true"
          else
            echo "::set-output name=result::false"
          fi

  bootstrap:
    name: Bootstrap the compiler
    needs: [pre_run]
    if: needs.pre_run.outputs.skip != 'true'

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2.4.0

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Build compiler
        run: ./koch.py boot -d:release

      - name: Upload compiler to artifacts
        uses: ./.github/actions/upload-compiler

  test:
    needs: [bootstrap]

    strategy:
      fail-fast: false

      matrix:
        # This controls the testament "batch" feature.
        #
        # If any additional batches are added, increment `total_batch` as well.
        #
        # This feature allow us to parallelize testing.
        batch: [0, 1]
        # This tells testament how many batches are used. Have to be placed in
        # an array due to how Github Actions process matrices.
        total_batch: [2]

    name: 'Test the compiler and stdlib (batch #${{ matrix.batch }})'

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2.4.0

      - uses: ./.github/actions/download-compiler

      - name: Install NodeJS
        uses: actions/setup-node@v2.5.1
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          deps=(
            # Needed by boehm gc tests
            libgc-dev

            # Required by Nim in Action tests
            libsdl1.2-dev
            libsfml-dev

            # Required by ARC/ORC memory leak tests (only enabled on linux x64)
            libc6-dbg
            valgrind
          )

          sudo apt-get update
          sudo apt-get install "${deps[@]}"

      - name: Run tester
        run: ./koch.py test --batch:'${{ matrix.batch }}_${{ matrix.total_batch }}' all

      - name: Print all test errors
        if: failure()
        run: bin/nim r tools/ci_testresults

  orc:
    name: Test build compiler with ORC
    needs: [bootstrap]

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2.4.0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Test ORC bootstrap
        run: ./koch.py --nim:bin/nim boot -d:release --gc:orc

  tooling:
    name: Build and test tooling
    needs: [bootstrap]

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2.4.0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Build tooling
        run: ./koch.py tools -d:release

      - name: Test tooling
        run: ./koch.py testTools

  doc:
    name: Build HTML documentation
    needs: [bootstrap]

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2.4.0

      - uses: ./.github/actions/download-compiler

      - name: Enable annotations
        run: echo "::add-matcher::.github/nim-problem-matcher.json"

      - name: Build docs
        run: |
          branch=${{ github.ref }}
          # Remove refs/heads/ prefix
          branch=${branch##*/}

          ./koch.py doc \
            --git.url:'https://github.com/${{ github.repository }}' \
            --git.commit:'${{ github.sha }}' \
            --git.devel:"$branch"

      - name: Publish
        if: |
          github.event_name == 'push' && github.ref == 'refs/heads/devel'
        uses: crazy-max/ghaction-github-pages@v2.5.0
        with:
          build_dir: doc/html
        env:
          GITHUB_TOKEN: ${{ github.token }}

  passed:
    name: All check passed
    needs: [bootstrap, test, tooling, doc, orc]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Raise failure
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo "::error::There are failing required jobs"
          exit 1
